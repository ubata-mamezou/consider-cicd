# AWSへのデプロイ(開発環境)
name: deploy aws

on:
  workflow_call:
    inputs:
      app-name:
        description: アプリケーション名
        required: true
        type: string
      app-version:
        description: アプリケーションバージョン
        required: true
        type: string
      aws-region:
        description: AWSリージョン
        required: true
        type: string
      aws-ecr-repository-name:
        description: AWS ECR名
        required: true
        type: string
      ecs-cluster-name:
        description: ECSクラスター名
        required: true
        type: string
      ecs-service-name:
        description: ECSサービス名
        required: true
        type: string
      ecs-task-name:
        description: ECSタスク名
        required: true
        type: string
      env-variables:
        description: |
          環境変数(JSON) 
          ■指定例
          {"name": "PORT", "value": "8082"}, 
          {"name": "TEST_ENV", "value": "dev"}
        required: false
        type: string
        default: ""

# env:
#   GITHUB_PACKAGES_IMAGE_URL: ghcr.io/${{ github.repository_owner }}/${{ inputs.app-name }}:${{ inputs.app-version }}
#   ECR_URL: ${{ secrets.aws-account-id }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com
#   ECR_IMAGE_TAG: ${{ inputs.app-name }}-${{ inputs.app-version }}
#   ECR_IMAGE_URL: ${{ secrets.aws-aws-account-id }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.aws-ecr-repository-name }}:${{ inputs.app-name }}-${{ inputs.app-version }}

jobs:
  deploy-aws:
    uses: ./.github/workflows/deploy-aws-backend.yaml
    secrets: 
      aws-account-id: ${{ secrets.AWS_ACCOUNT_ID }}
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    with:
      app-name: ${{ inputs.app-name }}
      app-version: ${{ inputs.app-version }}
      aws-region: ${{ inputs.aws-region }}
      aws-ecr-repository-name: ${{ inputs.aws-ecr-repository-name }}
      ecs-cluster-name: ${{ inputs.ecs-cluster-name }}
      ecs-service-name: ${{ inputs.ecs-service-name }}
      ecs-task-name: ${{ inputs.ecs-task-name }}
      env-variables: ${{ inputs.env-variables }}

    # runs-on: ubuntu-latest
    # steps:
    #   # 実行環境セットアップ
    #   ## デプロイ対象のイメージを取得(取得元：GitHub Packages)
    #   - name: Pull Docker image from GitHub Packages
    #     run: |
    #       echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
    #       docker pull ${{ env.GITHUB_PACKAGES_IMAGE_URL }}
    #   ## AWS Credential情報を設定
    #   - name: Configure AWS credentials
    #     uses: aws-actions/configure-aws-credentials@v4
    #     with:
    #       aws-access-key-id: ${{ secrets.aws-access-key-id }}
    #       aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
    #       aws-region: ${{ inputs.aws-region }}

    #   # イメージプッシュ
    #   ## AWS ECRへログイン
    #   - name: login to AWS ECR
    #     run: aws ecr get-login-password --region ${{ inputs.aws-region }} | docker login --username AWS --password-stdin ${{ env.ECR_URL }}
    #   ## イメージプッシュ(公開先：AWS ECR)
    #   - name: Tag and Push Docker image to ECR
    #     id: push-image-to-ecr
    #     run: |
    #       docker tag ${{ env.GITHUB_PACKAGES_IMAGE_URL }} ${{ env.ECR_IMAGE_URL }}
    #       docker push ${{ env.ECR_IMAGE_URL }}
    #     continue-on-error: true
    #   ## イメージプッシュのコールバック：レジストリがImmutableの場合、同一バージョンを設定することはできないので、ログとしてその旨をコンソールに出力
    #   - name: callback
    #     if: steps.push-image-to-ecr.outcome == 'failure'
    #     run: echo 同一バージョンのパッケージはプッシュできません。バージョンを変えるか、同一バージョンのパッケージを削除してリトライしてください。

    #   # サービスを更新
    #   ## タスク定義の作成(AWSからタスク定義を取得し、それをもとに新しいタスク定義を作成)
    #   ## * 環境変数の設定はタスク定義の内容に合わせて変更してください(該当行：{"name": "PORT", "value": "8082"}, {"name": "TEST_ENV", "value": "dev"})
    #   ## * 機密情報を扱う場合はGitHub Secretsに値を設定し、その値を環境変数に設定してください
    #   - name: create new task
    #     run: |
    #       TASK_DEFINITION=$(\
    #         aws ecs describe-task-definition \
    #           --task-definition ${{ inputs.ecs-task-name }} \
    #           --query 'taskDefinition' \
    #           --output json)

    #       NEW_TASK_DEF=$(echo $TASK_DEFINITION | jq \
    #         --arg image_uri "${{ env.ECR_IMAGE_URL }}" \
    #         --argjson env_vars '[${{ inputs.env-variables }}]' \
    #         '
    #         .containerDefinitions[0].image = $image_uri |
    #         .containerDefinitions[0].environment = $env_vars |
    #         .family = "${{ inputs.ecs-task-name }}" |
    #         del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)
    #         ')

    #       echo "$NEW_TASK_DEF" > new-task-def.json

    #   ## 新しいタスク定義を登録
    #   - name: update task
    #     run: |
    #       aws ecs register-task-definition \
    #         --family ${{ inputs.ecs-task-name }} \
    #         --cli-input-json file://new-task-def.json

    #   ## サービスを更新(強制的にデプロイ)
    #   - name: deploy service
    #     run: |
    #       aws ecs update-service \
    #         --cluster ${{ inputs.ecs-cluster-name }} \
    #         --service ${{ inputs.ecs-service-name }} \
    #         --task-definition ${{ inputs.ecs-task-name }} \
    #         --force-new-deployment
