# # イメージビルド
# ## 前提とする言語、環境など
# * 脆弱性スキャン：Trivy　※流れを検証するため、組み込んだ仮のツール。広く採用されていますが、プロジェクトで正式採用されたものではないのでご注意ください。
# * イメージビルド：Docker Engine
# * イメージの公開先：GitHub Packages
# ## 事前条件
# * イメージビルドに使用するビルドしたリソースを事前にアップロードしてください。
#   * ここでのリソースはDockerfileから参照したいもの一式。
#   * Dockerfileは1つで、ローカルも、CIも兼用する必要があるので、ディレクトリ構成も順守する必要があります。
#   * 例. Maven：targetフォルダー、NPM：distフォルダー
name: build-image

on:
  workflow_call:
    inputs:
      app-name:
        description: アプリケーション名（アーティファクトの特定、イメージ名に使用します）
        required: true
        type: string
      app-version:
        description: アプリケーションバージョン（イメージのバージョンに使用します）
        required: true
        type: string
      work-directory:
        description: 作業ディレクトリ（ルート：.、サブディレクトリにあるアプリを対象とする場合：フォルダ名）
        required: true
        type: string
      dist-directory:
        description: ツールによるアーティファクトの参照先を吸収するための変数（ex. maven：target, npm：dist）
        required: false
        type: string
      build-artifacts-cached-key:
        description: キャッシュしたアーティファクトのキー名
        required: true
        type: string
      scan-report-cache-key:
        description: 脆弱性スキャンレポートのキャッシュキー名
        required: true
        type: string
      is-publish:
        description: イメージを公開する(true:公開、false:公開しない)
        required: false
        type: boolean
env:
  GITHUB_PACKAGES_ARTIFACT_URL: ${{ github.repository_owner }}/${{ inputs.app-name }}:${{ inputs.app-version }}

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.work-directory }}
    steps:
      # イメージビルド実行環境セットアップ
      ## コードをチェックアウト
      - name: checkout source
        uses: actions/checkout@v4
      ## 対象のアーティファクトをダウンロード
      ## note: キャッシュ/リストアだと受け渡しの挙動が不安定だったので、アップロード/ダウンロードで実現
      - name: download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.build-artifacts-cached-key }}
          path: ${{ inputs.work-directory }}/${{ inputs.dist-directory }}

      # イメージビルド
      - name: Build Docker image
        run: docker build -t ghcr.io/${{ github.repository_owner }}/${{ inputs.app-name }}:${{ inputs.app-version }} .

      # 脆弱性スキャン実行環境セットアップ
      ## キャッシュ（Trivy DB）
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy  # TrivyのDBキャッシュの保存場所
          key: ${{ runner.os }}-trivy-db
          restore-keys: ${{ runner.os }}-trivy-db
      ## Trivyインストール
      - name: Install Trivy
        run: |
          sudo apt-get update && sudo apt-get install -y wget
          wget -qO- https://github.com/aquasecurity/trivy/releases/download/v0.57.0/trivy_0.57.0_Linux-64bit.tar.gz | tar zxvf -
          sudo mv trivy /usr/local/bin/
      ## テンプレートダウンロード（Trivy）
      - name: Trivy HTML template download
        run: |
          mkdir trivy-resource/template -p
          wget https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl -O trivy-resource/template/html.tpl

      # 脆弱性スキャン（Trivy）
      - name: Scan Docker image with Trivy
        id: execute-image-scan
        run: |
          mkdir trivy-resource/result -p
          trivy image --format template --template "@contrib/html.tpl" -o trivy-resource/result/index.html ghcr.io/${{ github.repository_owner }}/${{ inputs.app-name }}:${{ inputs.app-version }}
        env:
          # 脆弱性のマスターデータ取得の時にrate limitかかるため、ACTIONS_RUNTIME_TOKENにTOKENを設定
          # # Tips: ACTIONS_RUNTIME_TOKENがレートリミットを**緩和**する理由
          # * ACTIONS_RUNTIME_TOKEN はGitHub Actions内でジョブが実行される間だけ有効な一時的なトークンで、GitHubのAPIリクエストの認証に使用できます。
          # * ACTIONS_RUNTIME_TOKENを使用して認証することで、GitHubのパブリックAPIと異なり、Actions用のレートリミットが適用され、より多くのリクエストを許可されます。
          # * GitHubは認証されたリクエストに対して、無認証リクエストよりも高いレートリミットを提供しているため、ACTIONS_RUNTIME_TOKENを使用することでAPIへのアクセス制限が緩和され、結果としてレートリミットに引っかかりにくくなります。
          ACTIONS_RUNTIME_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true #rete limitによるエラーが頻発するので暫定的にエラー無視
      ## 脆弱性スキャンコールバック
      ## * 前ステップがエラーだった場合、脆弱性スキャンができてない旨をレポートを作成
      - name: callback
        if: steps.execute-image-scan.outcome == 'failure'
        run: |
          echo 時間帯によってTrivyDBのダウンロードに失敗するため、エラーを抑止しています。
          echo イメージスキャンが異常終了しているため、脆弱性結果はありません。
          echo "<h1>イメージスキャンが異常終了しているため、脆弱性結果はありません</h1>" > trivy-resource/result/index.html

      # スキャンレポートのアップロード（レポート公開向けの一時保存）
      - name: move scan report
        run: |
          mkdir -p pages/${{ inputs.app-name }}/reports/image-scan
          mv trivy-resource/result/* pages/${{ inputs.app-name }}/reports/image-scan
      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.scan-report-cache-key }}
          path: ${{ inputs.work-directory }}/pages
      - name: PR FB
        if: ${{ github.event.pull_request.number != '' }}
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body 脆弱性スキャン結果 --body-file pages/${{ inputs.app-name }}/reports/image-scan/trivy-resource/result/index.html
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # memo: Enterprise planの場合、下記のパラメータが必要になるらしい
          # GH_ENTERPRISE_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # GH_HOST: your-host.com 
  
      # FIXME: 脆弱性があってもパイプラインが進んでしまっている
      # 脆弱性が見つかった場合、パイプラインを終了させる
      # - name: Check for vulnerabilities
      #   run: |
      #     if grep -q '"Vulnerabilities": \[' trivy-resource/result/index.html; then
      #       echo "Vulnerabilities found."
      #       exit 1
      #     else
      #       echo "No vulnerabilities found."
      #     fi

      # コンテナイメージ公開（公開先：GitHub Packages）
      - name: Publish Docker image to GitHub Packages
        if: inputs.is-publish == true
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker push ghcr.io/${{ github.repository_owner }}/${{ inputs.app-name }}:${{ inputs.app-version }}

      # クリーンアップ
      - name: Remove Docker images
        run: docker rmi ghcr.io/${{ github.repository_owner }}/${{ inputs.app-name }}:${{ inputs.app-version }}
