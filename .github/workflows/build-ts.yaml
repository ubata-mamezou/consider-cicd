# ts, nestjs, node20
name: CI/CD TS Appication

on:
  push:
    branches: 
      - 'feature/**'
    paths: 
      - 'customer/**'
      - '.github/workflows/build-ts.yml' # ワークフロー自体の更新もトリガー
  pull_request:
    branches: 
      - 'develop/**'
    paths: 
      - 'customer/**'
      - '.github/workflows/build-ts.yml' # ワークフロー自体の更新もトリガー

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # コードをチェックアウト
      - name: checkout resource
        uses: actions/checkout@v3
      # Node.jsのセットアップ
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20' # 使用するNode.jsのバージョン
          cache: 'npm' # npmキャッシュを有効化
          cache-dependency-path: ./customer/customer-service/package-lock.json
      # 依存ライブラリのインストール
      - name: Install dependencies
        working-directory: ./customer/customer-service
        run: npm install
      # コードのLintチェック
      - name: Run Lint
        working-directory: ./customer/customer-service
        run: npm run lint
      # テスト実行
      - name: Run Unit Tests
        working-directory: ./customer/customer-service
        run: npm test
      # アーティファクト生成
      - name: Build Customer App
        working-directory: ./customer/customer-service
        run: npm run build
      # アーティファクト公開
      - name: Upload build artifact
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: customer-app-build
          path: ./customer/customer-service/dist # ビルド成果物のパス        
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Publish to GitHub Packages
      - name: Publish artifact to GitHub Packages
        working-directory: ./customer/customer-service
        run: |
          npm config set @${{ github.repository_owner }}:registry=https://npm.pkg.github.com
          npm config set //npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}
          npm publish || echo "Publish failed, skipping"
        ## 同一バージョンを公開するとエラーになってパイプラインがfailしてしまうので、エラーが発生しても成功扱いにするように設定
        continue-on-error: true
      # イメージビルド（Docker）
      - name: Build Docker image
        working-directory: ./customer/customer-service
        run: docker build -t ghcr.io/${{ github.repository_owner }}/customer-service:${{ github.sha }} .
      # Dockerイメージのスキャン
      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@v0.28.0
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/customer-service:latest
          format: 'json'
          output: 'artifact/trivy-report.json'
      # スキャンレポートをアーティファクトとしてアップロード
      - name: Upload Trivy Report
        uses: actions/upload-artifact@v3
        with:
          name: trivy-report
          path: artifact/trivy-report_customer-service.json

      # DockerイメージをGitHub Packagesにプッシュ
      - name: Push Docker image to GitHub Packages
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker push ghcr.io/${{ github.repository_owner }}/customer-service:latest