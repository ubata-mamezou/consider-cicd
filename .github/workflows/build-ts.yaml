# ts, nestjs, node20
name: CI/CD TS Appication

env:
  APP_NAME: customer-service
  APP_VERSION: 0.0.1
  AWS_REGION: ap-northeast-1
  WORK_DIRECTORY: ./customer/customer-service
  DIST_DIRECTORY: /dist # ビルドリソースの生成されるフォルダー（ex. Maven：/target、Node:/dist）

on:
  push:
    branches: 
      - 'feature/**'
    paths: 
      - 'customer/**'
      - '.github/workflows/**' # ワークフロー自体の更新もトリガー
  # pull_request:
  #   branches: 
  #     - 'develop/**'
  #   paths: 
  #     - 'customer/**'
  #     - '.github/workflows/**' # ワークフロー自体の更新もトリガー

jobs:
  build:
    # if: "!contains(github.event.head_commit.message, 'build-java.yml')" #Javaのワークフロー変更では動かないように制御
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORK_DIRECTORY }}
    steps:
      # 実行環境セットアップ
      ## コードをチェックアウト
      - name: checkout source
        uses: actions/checkout@v3
      ## Node.jsのセットアップ
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20' # 使用するNode.jsのバージョン
          cache: 'npm' # npmキャッシュを有効化
          cache-dependency-path: ./customer/customer-service/package-lock.json
      ## 依存ライブラリのインストール
      - name: Install dependencies
        # working-directory: ${{ env.WORK_DIRECTORY }}
        run: |
          npm install
          npm install --save-dev jest-html-reporters
      # 静的解析（Lint）
      - name: Run Lint
        # working-directory: ${{ env.WORK_DIRECTORY }}
        run: npm run lint
      # テスト
      - name: Run Unit Tests
        # working-directory: ${{ env.WORK_DIRECTORY }}
        run: npm run test:ci
      # テストレポートのアップロード（レポート公開向けの一時保存）
      - run: tree
      - name: Upload Test Report
        uses: actions/upload-pages-artifact@v1
        with:
          path: ${{ env.WORK_DIRECTORY }}/test-result
      # アーティファクト生成
      - name: Build Customer App
        # working-directory: ${{ env.WORK_DIRECTORY }}
        run: npm run build
      # アーティファクト公開
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: ${{ env.WORK_DIRECTORY }}${{ env.DIST_DIRECTORY }} # ビルド成果物のパス        
      # - name: Upload dockerfile
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: dockerfile
      #     path: ${{ env.WORK_DIRECTORY }}/Dockerfile
      # - name: Upload package.json
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: other-file
      #     path: ${{ env.WORK_DIRECTORY }}/package*.json
      # Publish to GitHub Packages
      - name: Publish artifact to GitHub Packages
        id: publish-artifact-to-packages
        # working-directory: ${{ env.WORK_DIRECTORY }}
        run: |
          npm config set @${{ github.repository_owner }}:registry=https://npm.pkg.github.com
          npm config set //npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}
          npm publish || echo "Publish failed, skipping"
        ## 同一バージョンを公開するとエラーになってパイプラインがfailしてしまうので、エラーが発生しても成功扱いにするように設定
        continue-on-error: true
      - name: アーティファクト公開コールバック
        if: steps.publish-artifact-to-packages.outcome == 'failure'
        run: echo 同一バージョンのパッケージはプッシュできません。バージョンを変えるか、同一バージョンのパッケージを削除してリトライしてください。
  # イメージビルド
  build-image:
    needs: build
    uses: ./.github/workflows/build-image.yaml
    with:
      app-name: customer-service
      app-version: 0.0.1
      work-directory: customer/customer-service
      dist-directory: /dist
  # テストレポートを公開
  publish-test-result:
    runs-on: ubuntu-latest
    needs: build-image
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - name: init
      run: mkdir pages
    # レポートダウンロード（事前にアップロードしていたレポートを取得）
    - name: download artifact
      uses: actions/download-artifact@v4
      with:
        name: test-report_${{ env.APP_NAME }}
        path: pages
    - name: download artifact
      uses: actions/download-artifact@v4
      with:
        name: image-scan-report_${{ env.APP_NAME }}
        path: pages
    # レポート公開(公開先：GitHub Pages)
    - name: upload
      uses: actions/upload-pages-artifact@v3
      with:
        path: pages
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
  # AWSへデプロイ
  deploy-aws:
    needs: build-image
    uses: ./.github/workflows/deploy-aws.yaml
    secrets: inherit #別ファイルにしたワークフローはスコープの問題でsecretの参照に失敗してしまう。inheritをつけることで呼び出し先にSecretが引き継ぐことができる。
    with:
      app-name: customer-service
      app-version: 0.0.1
      aws-region: ap-northeast-1
      aws-ecr-repository-name: consider-cicd
