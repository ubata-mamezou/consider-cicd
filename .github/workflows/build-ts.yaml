# ts, nestjs, node20
name: CI/CD TS Appication

env:
  APP_NAME: customer-service
  APP_VERSION: 0.0.1
  AWS_REGION: ap-northeast-1
  WORK_DIRECTORY: ./customer/customer-service

on:
  push:
    branches: 
      - 'feature/**'
    paths: 
      - 'customer/**'
      - '.github/workflows/**' # ワークフロー自体の更新もトリガー
  pull_request:
    branches: 
      - 'develop/**'
    paths: 
      - 'customer/**'
      - '.github/workflows/**' # ワークフロー自体の更新もトリガー

jobs:
  build:
    if: "!contains(github.event.head_commit.message, 'build-java.yml')" #Javaのワークフロー変更では動かないように制御
    runs-on: ubuntu-latest
    steps:
      # コードをチェックアウト
      - name: checkout resource
        uses: actions/checkout@v3
      # Node.jsのセットアップ
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20' # 使用するNode.jsのバージョン
          cache: 'npm' # npmキャッシュを有効化
          cache-dependency-path: ./customer/customer-service/package-lock.json
      # 依存ライブラリのインストール
      - name: Install dependencies
        working-directory: ./customer/customer-service
        run: |
          npm install
          npm install --save-dev jest-html-reporters
      # コードのLintチェック
      - name: Run Lint
        working-directory: ./customer/customer-service
        run: npm run lint
      # テスト実行
      - name: Run Unit Tests
        working-directory: ./customer/customer-service
        run: npm run test:ci
      # テストレポートのアップロード
      - name: Upload Test Report
        uses: actions/upload-pages-artifact@v1
        with:
          path: customer/customer-service/test-result
      # アーティファクト生成
      - name: Build Customer App
        working-directory: ./customer/customer-service
        run: npm run build
      # アーティファクト公開
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: ${{ env.WORK_DIRECTORY }}/dist # ビルド成果物のパス        
        # env:
        #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # upload for Dockerfile
      - name: Upload dockerfile
        uses: actions/upload-artifact@v4
        with:
          name: dockerfile
          path: ${{ env.WORK_DIRECTORY }}/Dockerfile
      # Publish to GitHub Packages
      - name: Publish artifact to GitHub Packages
        id: publish-artifact-to-packages
        working-directory: ./customer/customer-service
        run: |
          npm config set @${{ github.repository_owner }}:registry=https://npm.pkg.github.com
          npm config set //npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}
          npm publish || echo "Publish failed, skipping"
        ## 同一バージョンを公開するとエラーになってパイプラインがfailしてしまうので、エラーが発生しても成功扱いにするように設定
        continue-on-error: true
      - name: イメージプッシュコールバック
        if: steps.publish-artifact-to-packages.outcome == 'failure'
        run: echo 同一バージョンのパッケージはプッシュできません。バージョンを変えるか、同一バージョンのパッケージを削除してリトライしてください。
      # # イメージビルド（Docker）
      # - name: Build Docker image
      #   working-directory: ./customer/customer-service
      #   run: docker build -t ghcr.io/${{ github.repository_owner }}/customer-service:$APP_VERSION .
      # # Trivy DBのキャッシュ
      # - name: Cache Trivy DB
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.cache/trivy  # TrivyのDBキャッシュの保存場所
      #     key: ${{ runner.os }}-trivy-db
      #     restore-keys: |
      #       ${{ runner.os }}-trivy-db
      # # Trivyインストール
      # - name: Install Trivy
      #   run: |
      #     sudo apt-get update && sudo apt-get install -y wget
      #     wget -qO- https://github.com/aquasecurity/trivy/releases/download/v0.57.0/trivy_0.57.0_Linux-64bit.tar.gz | tar zxvf -
      #     sudo mv trivy /usr/local/bin/
      # # テンプレートダウンロード
      # - name: Trivy HTML template download
      #   run: |
      #     mkdir trivy-resource/template -p
      #     wget https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl -O trivy-resource/template/html.tpl
      # # 脆弱性スキャン（Trivy）
      # - name: Scan Docker image with Trivy
      #   run: |
      #     mkdir trivy-resource/result -p
      #     # trivy image --format json -o ./trivy-resource/result/trivy-report_$APP_NAME.json ghcr.io/${{ github.repository_owner }}/$APP_NAME:$APP_VERSION
      #     trivy image --format template --template "@contrib/html.tpl" -o trivy-resource/result/trivy-report_$APP_NAME.html ghcr.io/${{ github.repository_owner }}/$APP_NAME:$APP_VERSION
      #   env:
      #     # 脆弱性のマスターデータ取得の時にratelimitかかるため、ACTIONS_RUNTIME_TOKENにTOKENを設定
      #     # Tips: ACTIONS_RUNTIME_TOKENがレートリミットを緩和する理由
      #     # ACTIONS_RUNTIME_TOKEN はGitHub Actions内でジョブが実行される間だけ有効な一時的なトークンで、GitHubのAPIリクエストの認証に使用できます。
      #     # ACTIONS_RUNTIME_TOKENを使用して認証することで、GitHubのパブリックAPIと異なり、Actions用のレートリミットが適用され、より多くのリクエストを許可されます。
      #     # GitHubは認証されたリクエストに対して、無認証リクエストよりも高いレートリミットを提供しているため、ACTIONS_RUNTIME_TOKENを使用することでAPIへのアクセス制限が緩和され、結果としてレートリミットに引っかかりにくくなります。
      #     ACTIONS_RUNTIME_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   continue-on-error: true #retelimitによるエラーが頻発するので暫定的にエラー無視
      # # スキャンレポートをアップロード
      # - name: Upload Trivy Report
      #   uses: actions/upload-pages-artifact@v1
      #   with:
      #     path: trivy-resource/result
      # # FIXME: 脆弱性があってもパイプラインが進んでしまっている
      # # 脆弱性が見つかった場合、パイプラインを終了させる
      # - name: Check for vulnerabilities
      #   run: |
      #     if grep -q '"Vulnerabilities": \[' trivy-resource/result/trivy-report_$APP_NAME.html; then
      #       echo "Vulnerabilities found."
      #       exit 1
      #     else
      #       echo "No vulnerabilities found."
      #     fi
      # # DockerイメージをGitHub Packagesにプッシュ
      # - name: Push Docker image to GitHub Packages
      #   run: |
      #     echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      #     docker push ghcr.io/${{ github.repository_owner }}/$APP_NAME:$APP_VERSION
  # イメージビルド
  build-image:
    needs: build
    uses: ./.github/workflows/build-image.yaml
    with:
      app-name: customer-service
      app-version: 0.0.1
      dist-directory: /dist
  # Pagesへテスト結果を公開
  publish-test-result:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      pages: write
      id-token: write
    steps:
    - name: Deploy to GitHub Pages
      uses: actions/deploy-pages@v2
    - name: debug
      run: dir
  # AWSへデプロイ
  deploy-aws:
    needs: build-image
    uses: ./.github/workflows/deploy-aws.yaml
    secrets: inherit #別ファイルにしたワークフローはスコープの問題でsecretの参照に失敗してしまう。inheritをつけることで呼び出し先にSecretが引き継ぐことができる。
    with:
      app-name: customer-service
      app-version: 0.0.1
      aws-region: ap-northeast-1
      aws-ecr-repository-name: consider-cicd
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - build
  #     - publish-test-result
  #   steps:
  #   - name: Pull Docker image from GitHub Packages
  #     run: |
  #       echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
  #       docker pull ghcr.io/${{ github.repository_owner }}/$APP_NAME:$APP_VERSION
  #   # AWS認証情報を設定
  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v4
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: ${{ env.AWS_REGION }}
  #   # ECRへログイン
  #   - name: login to AWS ECR
  #     run: aws ecr get-login-password --region ${{ env.AWS_REGION}} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{ env.AWS_REGION}}.amazonaws.com
  #   # イメージプッシュ
  #   - name: Build and Push Docker image to ECR
  #     run: |
  #       docker tag ghcr.io/${{ github.repository_owner }}/$APP_NAME:$APP_VERSION ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/consider-cicd:$APP_NAME-$APP_VERSION
  #       docker push ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/consider-cicd:$APP_NAME-$APP_VERSION
