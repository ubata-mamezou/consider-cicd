# # TypeScriptアプリケーションのビルド
# ## 前提とする言語など
# * TypeScript
# * Node.js
name: CI/CD TS Application

env:
  APP_NAME: customer-service
  APP_VERSION: 0.0.1
  AWS_REGION: ap-northeast-1
  WORK_DIRECTORY: customer/customer-service
  DIST_DIRECTORY: /dist # ビルドリソースの生成されるフォルダー（ex. Maven：/target、Node:/dist）
  TEST_REPORT_DIRECTORY: test-result #WORK_DIRECTORYから見たパス
  NODE_VERSION: 20 # 使用するNode.jsのバージョン

on:
  workflow_dispatch: 
  push:
    branches: 
      - 'feature/**'
    paths: 
      - 'customer/**'
      - '.github/workflows/**' # ワークフロー自体の更新もトリガー

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORK_DIRECTORY }}
    steps:
      # 実行環境セットアップ
      ## コードをチェックアウト
      - name: checkout source
        uses: actions/checkout@v3
      ## Node.jsのセットアップ
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm' # npmキャッシュを有効化
          cache-dependency-path: ./customer/customer-service/package-lock.json
      ## 依存ライブラリのインストール
      - name: Install dependencies
        run: |
          npm install
          npm install --save-dev jest-html-reporters
      # 静的解析（Lint）
      - name: Run Lint
        run: npm run lint
      # テスト
      - name: Run Unit Tests
        run: npm run test:ci
      # テストレポートのアップロード（レポート公開向けの一時保存）
      - run: tree
      - name: move test report
        run: |
          mkdir -p pages/${{ env.APP_NAME }}/test-report
          cp -r ${{ env.TEST_REPORT_DIRECTORY }}/* pages/${{ env.APP_NAME }}/test-report
      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        with:
          name: test-report_${{ env.APP_NAME }}
          path: ${{ env.WORK_DIRECTORY }}/pages
      - run: tree
      # アーティファクト生成
      - name: Build Customer App
        run: npm run build
      # アーティファクトのアップロード（イメージビルド向けの一時保存）
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: ${{ env.WORK_DIRECTORY }}${{ env.DIST_DIRECTORY }} # ビルド成果物のパス        
      # アーティファクト公開（公開先：GitHub Packages）
      - name: Publish artifact to GitHub Packages
        id: publish-artifact-to-packages
        run: |
          npm config set @${{ github.repository_owner }}:registry=https://npm.pkg.github.com
          npm config set //npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}
          npm publish || echo "Publish failed, skipping"
        ## 同一バージョンを公開するとエラーになってパイプラインがfailしてしまうので、エラーが発生しても成功扱いにするように設定
        continue-on-error: true
      - name: アーティファクト公開コールバック
        if: steps.publish-artifact-to-packages.outcome == 'failure'
        run: echo 同一バージョンのパッケージはプッシュできません。バージョンを変えるか、同一バージョンのパッケージを削除してリトライしてください。
      - name: call action
        uses: ./actions/image-build
        with:
          app-name: ${{ env.APP_NAME }}
          app-version: ${{ env.APP_VERSION }}
          work-directory: ${{ env.WORK_DIRECTORY }}
          dist-directory: ${{ env.DIST_DIRECTORY }}
  # # イメージビルド
  # build-image:
  #   needs: build
  #   uses: ./.github/workflows/build-image.yaml
  #   with:
  #     app-name: customer-service
  #     app-version: 0.0.1
  #     work-directory: customer/customer-service
  #     dist-directory: /dist
  # # テストレポートを公開
  # publish-test-result:
  #   runs-on: ubuntu-latest
  #   needs: build-image
  #   permissions:
  #     pages: write
  #     id-token: write
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   steps:
  #   - name: init
  #     run: mkdir pages
  #   # レポートダウンロード（事前にアップロードしていたレポートを取得）
  #   - name: download test report
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: test-report_${{ env.APP_NAME }}
  #       path: pages
  #   - name: download image scan report
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: image-scan-report_${{ env.APP_NAME }}
  #       path: pages
  #   # レポート公開(公開先：GitHub Pages)
  #   - name: upload
  #     uses: actions/upload-pages-artifact@v3
  #     with:
  #       path: pages
  #   - name: Deploy to GitHub Pages
  #     id: deployment
  #     uses: actions/deploy-pages@v4
  # # デプロイ(デプロイ先：AWS)
  # deploy:
  #   needs: build-image
  #   uses: ./.github/workflows/deploy-aws.yaml
  #   secrets: inherit
  #   with:
  #     app-name: customer-service
  #     app-version: 0.0.1
  #     aws-region: ap-northeast-1
  #     aws-ecr-repository-name: consider-cicd
  #     ecs-cluster-name: consider-cicd-ecs
  #     ecs-service-name: consider-cicd-ecs-service_customer-service
  #     ecs-task-name: consider-cicd-ecs-task-customer-service
