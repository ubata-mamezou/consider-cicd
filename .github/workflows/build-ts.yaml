# ts, nestjs, node20
name: CI/CD TS Appication

env:
  APP_NAME: customer-service
  CONTAINER_VERSION: 0.0.1
  AWS_REGION: ap-northeast-1

on:
  push:
    branches: 
      - 'feature/**'
    paths: 
      - 'customer/**'
      - '.github/workflows/build-ts.yml' # ワークフロー自体の更新もトリガー
  pull_request:
    branches: 
      - 'develop/**'
    paths: 
      - 'customer/**'
      - '.github/workflows/build-ts.yml' # ワークフロー自体の更新もトリガー

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # コードをチェックアウト
      - name: checkout resource
        uses: actions/checkout@v3
      # Node.jsのセットアップ
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20' # 使用するNode.jsのバージョン
          cache: 'npm' # npmキャッシュを有効化
          cache-dependency-path: ./customer/customer-service/package-lock.json
      # 依存ライブラリのインストール
      - name: Install dependencies
        working-directory: ./customer/customer-service
        run: |
          npm install
          npm install --save-dev jest-html-reporters
      # コードのLintチェック
      - name: Run Lint
        working-directory: ./customer/customer-service
        run: npm run lint
      # テスト実行
      - name: Run Unit Tests
        working-directory: ./customer/customer-service
        run: npm run test:ci
      # テストレポートのアップロード
      - name: Upload Test Report
        uses: actions/upload-pages-artifact@v1
        with:
          path: customer/customer-service/test-result
      # アーティファクト生成
      - name: Build Customer App
        working-directory: ./customer/customer-service
        run: npm run build
      # アーティファクト公開
      - name: Upload build artifact
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: customer-app-build
          path: ./customer/customer-service/dist # ビルド成果物のパス        
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Publish to GitHub Packages
      - name: Publish artifact to GitHub Packages
        working-directory: ./customer/customer-service
        run: |
          npm config set @${{ github.repository_owner }}:registry=https://npm.pkg.github.com
          npm config set //npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}
          npm publish || echo "Publish failed, skipping"
        ## 同一バージョンを公開するとエラーになってパイプラインがfailしてしまうので、エラーが発生しても成功扱いにするように設定
        continue-on-error: true
      # イメージビルド（Docker）
      - name: Build Docker image
        working-directory: ./customer/customer-service
        run: docker build -t ghcr.io/${{ github.repository_owner }}/customer-service:$CONTAINER_VERSION .
      # # Dockerイメージのスキャン
      # - name: Scan Docker image for vulnerabilities
      #   uses: aquasecurity/trivy-action@v0.28.0
      #   with:
      #     image-ref: ghcr.io/${{ github.repository_owner }}/customer-service:$CONTAINER_VERSION
      #     format: 'json'
      #     output: 'artifact/trivy-report.json'
      # # スキャンレポートをアーティファクトとしてアップロード
      # - name: Upload Trivy Report
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: trivy-report
      #     path: artifact/trivy-report_customer-service.json
      # DockerイメージをGitHub Packagesにプッシュ
      - name: Push Docker image to GitHub Packages
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker push ghcr.io/${{ github.repository_owner }}/$APP_NAME:$CONTAINER_VERSION
  # Pagesへテスト結果を公開
  publish-test-result:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      pages: write
      id-token: write
    steps:
    - name: Deploy to GitHub Pages
      uses: actions/deploy-pages@v2
    - name: debug
      run: dir
  # AWSへデプロイ
  deploy:
    runs-on: ubuntu-latest
    needs:
      - build
      - publish-test-result
    steps:
    # AWS認証情報を設定
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: login to AWS ECR
      run: aws ecr get-login-password --region ${{ env.AWS_REGION}} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{ env.AWS_REGION}}.amazonaws.com
    - name: Build and Push Docker image to ECR
      run: |
        echo debug:$APP_NAME,$CONTAINER_VERSION,${{ env.AWS_REGION }}
        docker tag $APP_NAME:$CONTAINER_VERSION ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/consider-cicd:$CONTAINER_VERSION
        docker push ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/consider-cicd:$CONTAINER_VERSION

