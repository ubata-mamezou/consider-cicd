# java21, maven
name: CI/CD java application

on:
  push:
    # 一旦、mainブランチへのpushをトリガーにして実行
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # コードをチェックアウト
      - uses: actions/checkout@v3
      # JDK をセットアップ
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
      # Mavanリポジトリのキャッシュ
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      # MavenにGitHub Packagesへの認証設定追加
      - name: Generate Maven settings.xml
        run: |
          mkdir -p ~/.m2
          echo "<settings>
                  <servers>
                    <server>
                      <id>github</id>
                      <username>${{ github.actor }}</username>
                      <password>${{ secrets.GITHUB_TOKEN }}</password>
                    </server>
                  </servers>
                </settings>" > ~/.m2/settings.xml
      # Mavenでビルドし、jarファイルを生成
      - name: Build with Maven
        run: |
          cd order
          mvn clean install
          mvn surefire-report:report-only
      # テストレポートのアップロード
      - name: Upload Test Report
        uses: actions/upload-pages-artifact@v1
        with:
          path: order/target/reports
      # GitHub Packagesへjarファイルを公開
      - name: Publish to GitHub Packages
        run: |
          cd order
          mvn deploy -DskipTests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # イメージビルド（Docker）
      - name: Build Docker image
        run: |
          cd order
          docker build -t ghcr.io/${{ github.repository_owner }}/consider-cicd:${{ github.sha }} .
      # Trivy DBのキャッシュ
      - name: Cache Trivy DB
        uses: actions/cache@v3
        with:
          path: ~/.cache/trivy  # TrivyのDBキャッシュの保存場所
          key: ${{ runner.os }}-trivy-db
          restore-keys: |
            ${{ runner.os }}-trivy-db
      # Trivyインストール
      - name: Scan Docker image with Trivy
        run: |
          sudo apt-get update && sudo apt-get install -y wget
          wget -qO- https://github.com/aquasecurity/trivy/releases/download/v0.57.0/trivy_0.57.0_Linux-64bit.tar.gz | tar zxvf -
          sudo mv trivy /usr/local/bin/
      # テンプレートダウンロード
      - name: Scan Docker image with Trivy
        run: |
          mkdir trivy-resource/template
          wget https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl -O trivy-resource/template/html.tpl
      # 脆弱性スキャン（Trivy）
      # 脆弱性が見つかった場合、パイプラインを終了させる
          # trivy image --exit-code 1 --no-progress ghcr.io/${{ github.repository_owner }}/consider-cicd:${{ github.sha }}
          # trivy image --exit-code 1 --format template --template ./trivy-resource/template/html.tpl -o trivy-resource/result/trivy-report.html ghcr.io/${{ github.repository_owner }}/consider-cicd:${{ github.sha }}
      - name: Scan Docker image with Trivy
        run: |
          mkdir trivy-resource/result
          trivy image -format json -o ./trivy-resource/result/trivy-report.json ghcr.io/${{ github.repository_owner }}/consider-cicd:${{ github.sha }}

        env:
          # 脆弱性のマスターデータ取得の時にratelimitかかるため、ACTIONS_RUNTIME_TOKENにTOKENを設定
          # Tips: ACTIONS_RUNTIME_TOKENがレートリミットを緩和する理由
          # ACTIONS_RUNTIME_TOKEN はGitHub Actions内でジョブが実行される間だけ有効な一時的なトークンで、GitHubのAPIリクエストの認証に使用できます。
          # ACTIONS_RUNTIME_TOKENを使用して認証することで、GitHubのパブリックAPIと異なり、Actions用のレートリミットが適用され、より多くのリクエストを許可されます。
          # GitHubは認証されたリクエストに対して、無認証リクエストよりも高いレートリミットを提供しているため、ACTIONS_RUNTIME_TOKENを使用することでAPIへのアクセス制限が緩和され、結果としてレートリミットに引っかかりにくくなります。
          ACTIONS_RUNTIME_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # debug
      - name: Display Trivy Report
        run: cat trivy-resource/result/trivy-report.json
      # - name: Display Trivy Report
      #   run: cat trivy-resource/result/trivy-report.html
      # - name: debug
      #   run: |
      #     ls trivy-resource/template
      #     ls trivy-resource/result
      # スキャンレポートをアップロード
      - name: Upload Trivy Report
        uses: actions/upload-pages-artifact@v1
        with:
          path: trivy-resource/result
      # GitHub Packagesにコンテナイメージを公開
      - name: Publish Docker image to GitHub Packages
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker push ghcr.io/${{ github.repository_owner }}/consider-cicd:${{ github.sha }}
      # クリーンアップ（オプション）
      - name: Remove Docker images
        run: |
          docker rmi ghcr.io/${{ github.repository_owner }}/consider-cicd:${{ github.sha }}     
  # Pagesへテスト結果を公開
  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      pages: write
      id-token: write
    steps:
    - name: Deploy to GitHub Pages
      uses: actions/deploy-pages@v2
