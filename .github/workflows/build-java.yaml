# # Javaアプリケーションのビルド
# ## 前提とする言語など
# * Java21
# * Maven
name: CI/CD Java Application

env:
  APP_NAME: order # アプリケーション名
  APP_VERSION: 0.0.1 # アプリケーションバージョン
  AWS_REGION: ap-northeast-1 # AWSリージョン
  WORK_DIRECTORY: order # 作業ディレクトリ
  DIST_DIRECTORY: target # ビルドリソースの生成されるフォルダー（ex. Node:dist）
  JAVA_VERSION: 21 # 使用するJavaのバージョン

on:
  workflow_dispatch: #手動実行
  push:
    branches: 
      - 'feature/**'
      - 'topic/**'
    paths: 
      - 'order/**'
      - '.github/workflows/**' # ワークフロー自体の更新もトリガー
  pull_request: 
    branches: 
      - 'develop/**'
    paths: 
      - 'order/**'
      - '.github/workflows/**' # ワークフロー自体の更新もトリガー

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
          #Tips: defaults > run > working-directoryの設定はActionへの引数には適用されません
          working-directory: ${{ env.WORK_DIRECTORY }}
    steps:
      # develop: ビルド、テスト、パッケージ、アーティファクトの公開、イメージビルド、イメージの公開
      # それ以外: ビルド、テスト、パッケージ、イメージビルド
      - name: Set deployment condition
        run: |
          if [[ "${GITHUB_REF}" == refs/heads/develop/* ]]; then
            echo "DEPLOY=true" >> $GITHUB_ENV
          else
            echo "DEPLOY=false" >> $GITHUB_ENV
          fi
      - run: |
          echo env.DEPLOY
          echo ${{ env.DEPLOY }}
          echo $DEPLOY

      # 実行環境セットアップ
      ## コードをチェックアウト
      - name: checkout source
        uses: actions/checkout@v4
      ## JDK をセットアップ
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      ## キャッシュ（Mavenリポジトリ）
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      ## GitHub Packagesへの認証設定追加（Maven）
      - name: Generate Maven settings.xml
        run: |
          mkdir -p ~/.m2
          echo "<settings>
                  <servers>
                    <server>
                      <id>github</id>
                      <username>${{ github.actor }}</username>
                      <password>${{ secrets.GITHUB_TOKEN }}</password>
                    </server>
                  </servers>
                </settings>" > ~/.m2/settings.xml
      # ビルド、テスト、パッケージ（Maven）
      - name: Build with Maven
        run: mvn clean install surefire-report:report-only
      # アーティファクトのキャッシュ（イメージビルド向けの一時保存）
      - name: Cache build artifacts
        uses: actions/cache@v4
        # uses: actions/cache/save@v4
        with:
          path: ${{ env.WORK_DIRECTORY }}/${{ env.DIST_DIRECTORY }}
          key: artifact-dist-${{ env.APP_NAME }}
          fail-on-cache-miss: true
      # テストレポートのアップロード（レポート公開向けの一時保存）
      - name: move test report
        run: |
          mkdir -p pages/${{ env.APP_NAME }}/test-report
          cp -r ${{ env.DIST_DIRECTORY }}/reports/* pages/${{ env.APP_NAME }}/test-report
      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        with:
          name: test-report_${{ env.APP_NAME }}
          path: ${{ env.WORK_DIRECTORY }}/pages
      # アーティファクト公開（公開先：GitHub Packages）
      - name: Publish artifact to GitHub Packages
        if: env.DEPLOY == 'true'
        id: publish-artifact-to-packages
        run: mvn deploy -DskipTests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true #同一バージョンのpushエラーが発生するため、エラー無視
      # アーティファクト公開コールバック
      - name: callback
        if: steps.publish-artifact-to-packages.outcome == 'failure'
        run: echo 同一バージョンのパッケージはプッシュできません。バージョンを変えるか、同一バージョンのパッケージを削除してリトライしてください。
  # イメージビルド
  build-image:
    needs: build
    uses: ./.github/workflows/build-image.yaml
    with:
      app-name: order
      app-version: 0.0.1
      work-directory: order
      dist-directory: /target
      cache-artifact-key: artifact-dist-order
      is-publish: $DEPLOY
  # テストレポートを公開
  publish-test-result:
    runs-on: ubuntu-latest
    needs: build-image
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - name: init
      run: mkdir pages
    # レポートダウンロード（事前にアップロードしていたレポートを取得）
    - name: download test report
      uses: actions/download-artifact@v4
      with:
        name: test-report_${{ env.APP_NAME }}
        path: pages
    - name: download image scan report
      uses: actions/download-artifact@v4
      with:
        name: image-scan-report_${{ env.APP_NAME }}
        path: pages
    # レポート公開(公開先：GitHub Pages)
    - name: upload
      uses: actions/upload-pages-artifact@v3
      with:
        path: pages
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
  # デプロイ(デプロイ先：AWS)
  # deploy:
    # needs: build-image
    # uses: ./.github/workflows/dev/deploy-aws_dev.yaml
    # # Tips：自身で設定したsecretを別ファイルから参照するには？
    # # 別ファイルにしたワークフローはスコープの問題でsecretの参照に失敗します。
    # # inheritをつけることで呼び出し先にSecretが引き継がれるので、呼び出し先でも参照することができます。
    # secrets: inherit 
    # with:
    #   app-name: order
    #   app-version: 0.0.1
    #   aws-region: ap-northeast-1
    #   aws-ecr-repository-name: consider-cicd
    #   ecs-cluster-name: consider-cicd-ecs
    #   ecs-service-name: consider-cicd-ecs-service_order-service
    #   ecs-task-name: consider-cicd-ecs-task-order
    #   env-variables: |
    #     {"name": "PORT", "value": "8081"}, 
    #     {"name": "TEST_ENV", "value": "dev"}
