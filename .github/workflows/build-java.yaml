# java21, maven
name: CI/CD java application

env:
  APP_NAME: order # アプリケーション名
  APP_VERSION: 0.0.1 # アプリケーションバージョン
  AWS_REGION: ap-northeast-1 # AWSリージョン
  WORK_DIRECTORY: ./order # 作業ディレクトリ
  DIST_DIRECTORY: /target # ビルドリソースの生成されるフォルダー（ex. Maven：/target、Node:/dist）

on:
  push:
    branches: 
      - 'feature/**'
    paths: 
      - 'order/**'
      - '.github/workflows/**' # ワークフロー自体の更新もトリガー
  # pull_request:
  #   branches: 
  #     - 'develop/**'
  #   paths: 
  #     - 'order/**'
  #     - '.github/workflows/**' # ワークフロー自体の更新もトリガー

jobs:
  build:
    # if: "!contains(github.event.head_commit.message, 'build-ts.yml')" #TSのワークフロー変更では動かないように制御
    runs-on: ubuntu-latest
    steps:
      # 実行環境セットアップ
      ## コードをチェックアウト
      - name: checkout source
        uses: actions/checkout@v4
      ## JDK をセットアップ
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      ## キャッシュ（Mavanリポジトリ）
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      ## GitHub Packagesへの認証設定追加（Maven）
      - name: Generate Maven settings.xml
        run: |
          mkdir -p ~/.m2
          echo "<settings>
                  <servers>
                    <server>
                      <id>github</id>
                      <username>${{ github.actor }}</username>
                      <password>${{ secrets.GITHUB_TOKEN }}</password>
                    </server>
                  </servers>
                </settings>" > ~/.m2/settings.xml
      # ビルド、テスト、パッケージ（Maven）
      - name: Build with Maven
        working-directory: ${{ env.WORK_DIRECTORY }}
        run: mvn clean install surefire-report:report-only
      # # upload for jar
      # - name: Upload artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: build-artifact
      #     path: ${{ env.WORK_DIRECTORY }}/target/${{ env.APP_NAME }}-${{ env.APP_VERSION }}.jar
      # # upload for Dockerfile
      # - name: Upload dockerfile
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: dockerfile
      #     path: ${{ env.WORK_DIRECTORY }}/Dockerfile
      # テストレポートのアップロード（レポート公開向けの一時保存）
      - name: move test report
        run: |
          mkdir -p pages/${{ env.APP_NAME }}/test-report
          cp -r ${{ env.WORK_DIRECTORY }}/target/reports/* pages/${{ env.APP_NAME }}/test-report
      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        with:
          name: test-report_${{ env.APP_NAME }}
          path: pages
      # アーティファクト公開（公開先：GitHub Packages）
      - name: Publish artifact to GitHub Packages
        id: publish-artifact-to-packages
        working-directory: ${{ env.WORK_DIRECTORY }}
        run: mvn deploy -DskipTests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true #同一バージョンのpushエラーが発生するため、エラー無視
      - name: コールバック
        if: steps.publish-artifact-to-packages.outcome == 'failure'
        run: echo 同一バージョンのパッケージはプッシュできません。バージョンを変えるか、同一バージョンのパッケージを削除してリトライしてください。
      # イメージビルド
      - name: debug
        run: tree
      - name: build-image
        uses: ./.github/actions/build-image
        with:
          app-name: ${{ env.APP_NAME }}
          app-version: ${{ env.APP_VERSION }}
  # テストレポートを公開
  publish-test-result:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - name: init
      run: mkdir pages
    # レポートダウンロード（事前にアップロードしていたレポートを取得）
    - name: download artifact
      uses: actions/download-artifact@v4
      with:
        name: test-report_${{ env.APP_NAME }}
        path: pages
    - name: download artifact
      uses: actions/download-artifact@v4
      with:
        name: image-scan-report_${{ env.APP_NAME }}
        path: pages
    # レポート公開(公開先：GitHub Pages)
    - name: upload
      uses: actions/upload-pages-artifact@v3
      with:
        path: pages
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
  # デプロイ（AWS用）
  deploy-aws:
    needs: build
    uses: ./.github/workflows/deploy-aws.yaml
    secrets: inherit #別ファイルにしたワークフローはスコープの問題でsecretの参照に失敗してしまう。inheritをつけることで呼び出し先にSecretが引き継ぐことができる。
    with:
      app-name: order
      app-version: 0.0.1
      aws-region: ap-northeast-1
      aws-ecr-repository-name: consider-cicd
