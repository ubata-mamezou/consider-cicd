# # AWSへのデプロイ
# * イメージ公開先：GitHub Packages(CI/CD)、ECR(デプロイ先)
# * デプロイ先の環境：AWS
# ## 前提条件
# * イメージビルドが完了し、GitHub Packagesに公開されていること
# * デプロイ先に必要な環境が構築されていること
#   * VPC、サブネットなどのネットワーク設定
#   * IAM：デプロイに必要なポリシーが設定されているユーザーが設定されていること
#   * ECR
#   * ECS：クラスター、サービス、タスク定義を設定し、サービスが動作していること
# * GitHub SecretsにIAMのCredential情報を設定済みであること
#   * 必要なポリシー
#     * AmazonEC2ContainerRegistryFullAccess：イメージのプッシュに使用
#     * AmazonECS_FullAccess：ECSの操作に使用
#     * AmazonECSTaskExecutionRolePolicy：タスク定義の実行に使用
#     * AmazonS3ReadOnlyAccess：S3から環境設定ファイルを取得する際に使用（任意）
#   * 設定が必要な値
#     * AWS_ACCESS_KEY_ID
#     * AWS_SECRET_ACCESS_KEY
# ## Appendix. 構築する際は段階を踏むと組みやすくなります
# 1. イメージプッシュまで構築する
#   1. ネットワーク、IAM、ECRを設定
#   2. IAMのCredential情報を設定
#   3. イメージプッシュまで構築
# 2. サービス更新部分を追加で構築する
#   1. プッシュされたイメージを使ったサービスを動作させる
#   2. サービス更新を構築
name: deploy aws

on:
  workflow_call:
    inputs:
      app-name:
        description: アプリケーション名
        required: true
        type: string
      app-version:
        description: アプリケーションバージョン
        required: true
        type: string
      aws-region:
        description: AWSリージョン
        required: true
        type: string
      aws-ecr-repository-name:
        description: AWS ECR名
        required: true
        type: string
      ecs-cluster-name:
        description: ECSクラスター名
        required: true
        type: string
      ecs-service-name:
        description: ECSサービス名
        required: true
        type: string
      ecs-task-name:
        description: ECSタスク名
        required: true
        type: string

env:
  GITHUB_PACKAGES_IMAGE_URL: ghcr.io/${{ github.repository_owner }}/${{ inputs.app-name }}:${{ inputs.app-version }}
  ECR_URL: ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com
  ECR_IMAGE_TAG: ${{ inputs.app-name }}-${{ inputs.app-version }}
  ECR_IMAGE_URL: ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.aws-ecr-repository-name }}:${{ inputs.app-name }}-${{ inputs.app-version }}

jobs:
  deploy-aws:
    runs-on: ubuntu-latest
    steps:
      # 実行環境セットアップ
      ## デプロイ対象のイメージを取得(取得元：GitHub Packages)
      - name: Pull Docker image from GitHub Packages
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker pull ${{ env.GITHUB_PACKAGES_IMAGE_URL }}
      ## AWS Credential情報を設定
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws-region }}

      # イメージプッシュ
      ## AWS ECRへログイン
      - name: login to AWS ECR
        run: aws ecr get-login-password --region ${{ inputs.aws-region }} | docker login --username AWS --password-stdin ${{ env.ECR_URL }}
      ## イメージプッシュ(公開先：AWS ECR)
      - name: Tag and Push Docker image to ECR
        id: push-image-to-ecr
        run: |
          docker tag ${{ env.GITHUB_PACKAGES_IMAGE_URL }} ${{ env.ECR_IMAGE_URL }}
          docker push ${{ env.ECR_IMAGE_URL }}
        continue-on-error: true
      ## イメージプッシュのコールバック：レジストリがImmutableの場合、同一バージョンを設定することはできないので、ログとしてその旨をコンソールに出力
      - name: callback
        if: steps.push-image-to-ecr.outcome == 'failure'
        run: echo 同一バージョンのパッケージはプッシュできません。バージョンを変えるか、同一バージョンのパッケージを削除してリトライしてください。

      # サービスを更新
      ## タスク定義の作成(AWSからタスク定義を取得し、それをもとに新しいタスク定義を作成)
      ## * 環境変数の設定はタスク定義の内容に合わせて変更してください(該当行：{"name": "PORT", "value": "8082"}, {"name": "TEST_ENV", "value": "dev"})
      ## * 機密情報を扱う場合はGitHub Secretsに値を設定し、その値を環境変数に設定してください
      - name: create new task
        run: |
          TASK_DEFINITION=$(\
            aws ecs describe-task-definition \
              --task-definition ${{ inputs.ecs-task-name }} \
              --query 'taskDefinition' \
              --output json)
          # echo "-----debug: current task definition"
          # echo $TASK_DEFINITION

          NEW_TASK_DEF=$(echo $TASK_DEFINITION | jq \
            --arg image_uri "${{ env.ECR_IMAGE_URL }}" \
            --argjson env_vars '[
              {"name": "PORT", "value": "8082"}, 
              {"name": "TEST_ENV", "value": "dev"}
              ]' \
            '
            .containerDefinitions[0].image = $image_uri |
            .containerDefinitions[0].environment = $env_vars |
            .family = "${{ inputs.ecs-task-name }}" |
            del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)
            ')

          echo "$NEW_TASK_DEF" > new-task-def.json
          # echo "-----debug: new task definition"
          # cat new-task-def.json

      ## 新しいタスク定義を登録
      - name: update task
        run: aws ecs register-task-definition --family ${{ inputs.ecs-task-name }} --cli-input-json file://new-task-def.json

      ## サービスを更新(強制的にデプロイ)
      - name: deploy service
        run: |
          aws ecs update-service \
            --cluster ${{ inputs.ecs-cluster-name }} \
            --service ${{ inputs.ecs-service-name }} \
            --task-definition ${{ inputs.ecs-task-name }} \
            --force-new-deployment
