# # React+TypeScriptアプリケーションのビルド
# ## 前提とする言語など
# * React
# * TypeScript
# * Node.js
# * Vite
# * jest
# ## 備考
# * 初稿時点では、処理内容はTypeScript Applicationと同じが、UI特有の処理(ヴィジュアルテストなど)が追加される可能性を考慮して、別ファイルで作成。
name: (reusable workflow) Build React Application

on:
  workflow_call:
    inputs:
      app-name:
        description: アプリケーション名
        required: true
        type: string
      app-version:
        description: アプリケーションバージョン
        required: true
        type: string
      work-directory:
        description: 作業ディレクトリ（アプリのルートフォルダ）
        required: true
        type: string
      dist-directory:
        description: ビルドリソースの生成されるフォルダー
        required: false
        type: string
        default: dist
      node-version:
        description: Nodeのバージョン
        required: true
        type: string
      test-report-cache-key:
        description: テストレポートのキャッシュキー名
        required: true
        type: string
      build-artifacts-cache-key:
        description: ビルドしたアーティファクトのキャッシュキー名
        required: true
        type: string
      is-publish:
        description: Jar,イメージの公開有無(true:公開する、false:公開しない)
        required: false
        type: boolean
        default: false

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.work-directory }}
    steps:
      # 実行環境セットアップ
      ## コードをチェックアウト
      - name: checkout source
        uses: actions/checkout@v4
      ## Node.jsのセットアップ
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm' # npmキャッシュを有効化
          cache-dependency-path: ${{ inputs.work-directory }}/package-lock.json
      ## 依存ライブラリのインストール
      - name: Install dependencies
        run: |
          npm install
          npm install --save-dev jest-html-reporters
      # 静的解析（Lint）
      - name: Run Lint
        run: npm run lint
      # テスト
      - name: Run Unit Tests
        run: npm run test:ci
      # テストレポートのアップロード（レポート公開向けの一時保存）
      - name: move test report
        env:
          test-report-directory: ${{ inputs.app-name }}/reports/test-report
        run: |
          mkdir -p pages/${{ env.test-report-directory }}
          mv test-result/* pages/${{ env.test-report-directory }}
      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.test-report-cache-key }}
          path: ${{ inputs.work-directory }}/pages
      # アーティファクト生成
      - name: Build App
        run: npm run build
      # アーティファクトのアップロード（イメージビルド向けの一時保存）
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.build-artifacts-cache-key }}
          path: ${{ inputs.work-directory }}/${{ inputs.dist-directory }}
      # アーティファクト公開（公開先：GitHub Packages）
      - name: Publish artifact to GitHub Packages
        if: inputs.is-publish
        id: publish-artifact-to-packages
        run: |
          npm config set @${{ github.repository_owner }}:registry=https://npm.pkg.github.com
          npm config set //npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}
          npm publish || echo "Publish failed, skipping"
        ## 同一バージョンを公開するとエラーになってパイプラインがfailしてしまうので、エラーが発生しても成功扱いにするように設定
        continue-on-error: true
      # アーティファクト公開コールバック
      - name: callback
        if: steps.publish-artifact-to-packages.outcome == 'failure'
        run: echo 同一バージョンのパッケージはプッシュできません。バージョンを変えるか、同一バージョンのパッケージを削除してリトライしてください。
