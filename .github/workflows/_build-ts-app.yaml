# TypeScriptアプリケーションのビルド
# ## 前提とする言語など
# * Node.js
# * (Nest.js)
# * (TypeScript)
# * lint: esLint
# * test: jest
# * build: vite
# * ※「xxx: yyy」：yyyをベースとして実装していますが、xxxコマンドで実行できればよいので他のモノでも代替可。
# * ※(yyy)：yyyをベースとして実装していますが、当ワークフローはこれに特化した処理は含んでいないため、他のモノでも代替可。
name: Build TypeScript Application

on:
  workflow_call:
    inputs:
      app-name:
        description: アプリケーション名
        required: true
        type: string
      app-version:
        description: アプリケーションバージョン
        required: true
        type: string
      work-directory:
        description: 作業ディレクトリ（アプリのルートフォルダ）
        required: true
        type: string
      dist-directory:
        description: ビルドリソースの生成されるフォルダー
        required: false
        type: string
        default: dist
      node-version:
        description: Nodeのバージョン
        required: true
        type: string
      test-report-cache-key:
        description: テストレポートのキャッシュキー名
        required: true
        type: string
      build-artifacts-cache-key:
        description: ビルドしたアーティファクトのキャッシュキー名
        required: true
        type: string
      current-pr-comment-cache-key:
        description: PRコメントファイルのキャッシュキー名(コメントをキャッシュしている場合は必須)
        required: false
        type: string
        default: ''
      pr-comment-folder-name:
        description: PRへのフィードバックコメントファイルの格納先フォルダー名
        required: true
        type: string
      pr-comment-file-name:
        description: PRへのフィードバックコメントファイル名
        required: true
        type: string
      is-publish:
        description: Jar,イメージの公開有無(true:公開する、false:公開しない)
        required: false
        type: boolean
        default: false
    outputs:
      new-pr-comment-cache-key:
        description: PRコメントファイルのキャッシュキー名
        value: ${{ jobs.build.outputs.new-pr-comment-cache-key }}
    
jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.work-directory }}
    env:
      test-report-directory: ${{ inputs.app-name }}/reports/test-report
    outputs:
      new-pr-comment-cache-key: ${{ steps.generate-pr-comment-cache-key.outputs.key }}
    steps:
      # 実行環境セットアップ
      ## コードをチェックアウト
      - name: checkout source
        uses: actions/checkout@v3
      ## Node.jsのセットアップ
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm' # npmキャッシュを有効化
          cache-dependency-path: ${{ inputs.work-directory }}/package-lock.json
      ## 依存ライブラリのインストール
      - name: Install dependencies
        run: |
          npm install
          npm install --save-dev jest-html-reporters
      ## PRコメントダウンロード
      - run: mkdir ${{ inputs.pr-comment-folder-name }}
      - name: Download pr-comment
        if: inputs.current-pr-comment-cache-key != ''
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.current-pr-comment-cache-key }}
          path: ${{ inputs.pr-comment-folder-name }}
        continue-on-error: true
      ## このジョブ内でPRコメントのキャッシュに使用するキー生成
      - name: generate pr-comment cache key
        id: generate-pr-comment-cache-key
        run: echo "key=pr-comment-${{ github.run_id }}-${{ github.job }}" >> $GITHUB_OUTPUT

      # 静的解析（Lint）
      - name: Run Lint
        run: npm run lint

      # テスト
      - name: Run Unit Tests
        run: npm run test:ci
      ## テストレポートのアップロード（レポート公開向けの一時保存）
      - name: move test report
        run: |
          mkdir -p pages/${{ env.test-report-directory }}
          mv test-result/* pages/${{ env.test-report-directory }}
      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.test-report-cache-key }}
          path: ${{ inputs.work-directory }}/pages
      - name: PR comment
        if: ${{ github.event.pull_request.number != '' }}
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          ARTIFACT_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          PAGES_URL="https://${{ github.repository_owner }}.github.io/$REPO_NAME"
          TEST_REPORT_ROOT_URL="$PAGES_URL/${{ inputs.app-name }}/reports/test-report"

          COVERAGE_URL="$TEST_REPORT_ROOT_URL/coverage/lcov-report/index.html"
          TEST_REPORT_URL="$TEST_REPORT_ROOT_URL/rest-report/index.html"
          
          echo "
            ## テスト結果のフィードバック  
            * ワークフローごとに保存しているテスト結果は[こちら]($ARTIFACT_URL)　※GitHubの設定期間保持されます（デフォルト：90日）  
            * カバレッジレポートのプレビューは[こちら]($COVERAGE_URL)　※次のワークフローが動くと上書きされます  
            * テスト結果レポートのプレビュー環境は[こちら]($TEST_REPORT_URL)　※次のワークフローが動くと上書きされます  
            " >> ${{ inputs.pr-comment-folder-name }}/${{ inputs.pr-comment-file-name }}
  
      # ビルド
      - name: Build TS App
        run: npm run build
      ## アーティファクトのアップロード（イメージビルド向けの一時保存）
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.build-artifacts-cache-key }}
          path: ${{ inputs.work-directory }}/${{ inputs.dist-directory }}

      # アーティファクト公開（公開先：GitHub Packages）
      - name: Publish artifact to GitHub Packages
        if: inputs.is-publish
        id: publish-artifact-to-packages
        run: |
          npm config set @${{ github.repository_owner }}:registry=https://npm.pkg.github.com
          npm config set //npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}
          npm publish || echo "Publish failed, skipping"
        continue-on-error: true #リポジトリがimmutableの場合、同一バージョンのpushはできないため、エラー無視
      ## アーティファクト公開コールバック
      - name: callback to console
        if: steps.publish-artifact-to-packages.outcome == 'failure'
        run: echo 同一バージョンのパッケージはプッシュできません。バージョンを変えるか、同一バージョンのパッケージを削除してリトライしてください。
      - name: callback to PR
        if: ${{ steps.publish-artifact-to-packages.outcome == 'failure' && github.event.pull_request.number != '' }}
        run: |
          echo "
            ## パッケージプッシュのフィードバック  
            * 同一バージョンのパッケージはプッシュできません。バージョンを変えるか、同一バージョンのパッケージを削除してリトライしてください。
            " >> ${{ inputs.pr-comment-folder-name }}/${{ inputs.pr-comment-file-name }}

      # PRコメントアップロード
      - name: Upload pr-comment
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.generate-pr-comment-cache-key.outputs.new-pr-comment-cache-key }}
          path: ${{ inputs.work-directory }}/${{ inputs.pr-comment-folder-name }}
